import { n8nFetch } from '../../lib/n8n';
function VodokanalSearch() { const [currentQuery, setCurrentQuery] = React.useState(''); const [chatSessions, setChatSessions] = React.useState([]); const [activeSessionId, setActiveSessionId] = React.useState(null); const [messages, setMessages] = React.useState([]); const [loading, setLoading] = React.useState(false); const [error, setError] = React.useState(null); const popularQueries = [ 'В каких районах за последние 3 дня произошло больше всего аварий', 'Какие объекты в Северном округе стоят в плане на ремонт', 'Покажи все жалобы жителей ЮЗАО за неделю', 'Где за месяц зафиксированы превышения по содержанию железа', 'Сколько инцидентов было устранено менее чем за 4 часа за месяц', 'Есть ли аварии в районах, где на этой неделе идут плановые работы' ]; React.useEffect(() => { loadChatSessions(); }, []); const loadChatSessions = async () => { try { const mockSessions = [ { id: '1', title: 'Аварии в районах', lastMessage: 'В каких районах за последние 3 дня...', createdAt: '2025-05-28T10:30:00Z' }, { id: '2', title: 'Жалобы ЮЗАО', lastMessage: 'Покажи все жалобы жителей ЮЗАО...', createdAt: '2025-05-27T15:20:00Z' } ]; setChatSessions(mockSessions); } catch (err) { console.error('Ошибка при загрузке сессий:', err); } }; const createNewSession = () => { const newSessionId = Date.now().toString(); const newSession = { id: newSessionId, title: 'Новый чат', lastMessage: '', createdAt: new Date().toISOString() }; setChatSessions(prev => [newSession, ...prev]); setActiveSessionId(newSessionId); setMessages([]); setCurrentQuery(''); }; const selectSession = (sessionId) => { setActiveSessionId(sessionId); setMessages([]); }; const handleSubmitQuery = async (query = currentQuery) => { if (!query.trim()) return; setLoading(true); setError(null); try { if (!activeSessionId) { createNewSession(); } const userMessage = { id: Date.now().toString(), type: 'user', content: query, timestamp: new Date().toISOString() }; setMessages(prev => [...prev, userMessage]); setCurrentQuery(''); setTimeout(() => { const botMessage = { id: (Date.now() + 1).toString(), type: 'assistant', content: `Ответ на запрос: "${query}". Это тестовый ответ. В реальной реализации здесь будет ответ от LLM на основе данных из БД.`, timestamp: new Date().toISOString() }; setMessages(prev => [...prev, botMessage]); setLoading(false); }, 1500); } catch (err) { setError(err.message || 'Произошла ошибка при отправке запроса'); setLoading(false); } }; const handlePopularQuery = (query) => { setCurrentQuery(query); handleSubmitQuery(query); }; return VodokanalSearchContent({ currentQuery, setCurrentQuery, chatSessions, activeSessionId, messages, loading, error, popularQueries, onSubmitQuery: handleSubmitQuery, onPopularQuery: handlePopularQuery, onCreateNewSession: createNewSession, onSelectSession: selectSession });
}
function VodokanalSearchContent({ currentQuery, setCurrentQuery, chatSessions, activeSessionId, messages, loading, error, popularQueries, onSubmitQuery, onPopularQuery, onCreateNewSession, onSelectSession
}) { const styles = { container: { display: 'flex', height: 'calc(100vh - 49px)', backgroundColor: '#f5f5f5' }, sidebar: { width: '280px', backgroundColor: '#fff', borderRight: '1px solid #e0e0e0', display: 'flex', flexDirection: 'column' }, sidebarHeader: { padding: '16px', borderBottom: '1px solid #e0e0e0' }, newChatButton: { width: '100%', padding: '12px 16px', backgroundColor: '#0066cc', color: '#fff', border: 'none', borderRadius: '6px', fontSize: '14px', fontWeight: '500', cursor: 'pointer', transition: 'background-color 0.2s' }, sessionsList: { flex: 1, overflowY: 'auto', padding: '8px' }, sessionItem: { padding: '12px 16px', margin: '4px 0', borderRadius: '6px', cursor: 'pointer', transition: 'background-color 0.2s', backgroundColor: 'transparent' }, sessionItemActive: { backgroundColor: '#f0f8ff' }, sessionItemHover: { backgroundColor: '#f9f9f9' }, sessionTitle: { fontSize: '14px', fontWeight: '500', color: '#333', marginBottom: '4px' }, sessionPreview: { fontSize: '12px', color: '#666', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }, sessionTime: { fontSize: '11px', color: '#999', marginTop: '4px' }, mainContent: { flex: 1, display: 'flex', flexDirection: 'column', backgroundColor: '#fff' }, chatArea: { flex: 1, padding: '20px', overflowY: 'auto', display: 'flex', flexDirection: 'column' }, welcomeScreen: { flex: 1, display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', textAlign: 'center', maxWidth: '600px', margin: '0 auto' }, welcomeTitle: { fontSize: '24px', fontWeight: '600', color: '#333', marginBottom: '12px' }, welcomeSubtitle: { fontSize: '16px', color: '#666', marginBottom: '32px', lineHeight: '1.5' }, popularQueriesGrid: { display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))', gap: '12px', width: '100%', marginBottom: '32px' }, popularQueryButton: { padding: '16px', backgroundColor: '#f8f9fa', border: '1px solid #e0e0e0', borderRadius: '8px', cursor: 'pointer', textAlign: 'left', fontSize: '14px', color: '#333', transition: 'all 0.2s', lineHeight: '1.4' }, messagesContainer: { flex: 1, padding: '20px 0' }, message: { marginBottom: '16px' }, messageUser: { display: 'flex', justifyContent: 'flex-end' }, messageAssistant: { display: 'flex', justifyContent: 'flex-start' }, messageBubble: { maxWidth: '70%', padding: '12px 16px', borderRadius: '12px', fontSize: '14px', lineHeight: '1.4' }, messageBubbleUser: { backgroundColor: '#0066cc', color: '#fff' }, messageBubbleAssistant: { backgroundColor: '#f1f3f4', color: '#333' }, inputArea: { padding: '20px', borderTop: '1px solid #e0e0e0', backgroundColor: '#fff' }, inputContainer: { display: 'flex', gap: '12px', maxWidth: '800px', margin: '0 auto' }, textInput: { flex: 1, padding: '12px 16px', border: '1px solid #e0e0e0', borderRadius: '8px', fontSize: '14px', resize: 'none', outline: 'none', fontFamily: 'inherit' }, sendButton: { padding: '12px 24px', backgroundColor: '#0066cc', color: '#fff', border: 'none', borderRadius: '8px', fontSize: '14px', fontWeight: '500', cursor: 'pointer', transition: 'background-color 0.2s', alignSelf: 'flex-end' }, sendButtonDisabled: { backgroundColor: '#ccc', cursor: 'not-allowed' }, loadingIndicator: { display: 'flex', justifyContent: 'flex-start', marginBottom: '16px' }, loadingBubble: { padding: '12px 16px', backgroundColor: '#f1f3f4', borderRadius: '12px', color: '#666', fontSize: '14px' } }; const formatSessionTime = (timestamp) => { const date = new Date(timestamp); const now = new Date(); const diff = now - date; if (diff < 24 * 60 * 60 * 1000) { return date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }); } else { return date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' }); } }; return React.createElement('div', { style: styles.container }, React.createElement('div', { style: styles.sidebar }, React.createElement('div', { style: styles.sidebarHeader }, React.createElement('button', { style: styles.newChatButton, onClick: onCreateNewSession }, '+ Новый запрос') ), React.createElement('div', { style: styles.sessionsList }, chatSessions.map(session => React.createElement('div', { key: session.id, style: { ...styles.sessionItem, ...(session.id === activeSessionId ? styles.sessionItemActive : {}) }, onClick: () => onSelectSession(session.id) }, React.createElement('div', { style: styles.sessionTitle }, session.title), React.createElement('div', { style: styles.sessionPreview }, session.lastMessage), React.createElement('div', { style: styles.sessionTime }, formatSessionTime(session.createdAt)) ) ) ) ), React.createElement('div', { style: styles.mainContent }, React.createElement('div', { style: styles.chatArea }, (!activeSessionId || messages.length === 0) ? React.createElement('div', { style: styles.welcomeScreen }, React.createElement('h1', { style: styles.welcomeTitle }, 'Поиск по данным водоканала'), React.createElement('p', { style: styles.welcomeSubtitle }, 'Задайте вопрос о работе водоканала и получите ответ на основе актуальных данных' ), React.createElement('div', { style: styles.popularQueriesGrid }, popularQueries.map((query, index) => React.createElement('button', { key: index, style: styles.popularQueryButton, onClick: () => onPopularQuery(query) }, query) ) ) ) : React.createElement('div', { style: styles.messagesContainer }, messages.map(message => React.createElement('div', { key: message.id, style: { ...styles.message, ...(message.type === 'user' ? styles.messageUser : styles.messageAssistant) } }, React.createElement('div', { style: { ...styles.messageBubble, ...(message.type === 'user' ? styles.messageBubbleUser : styles.messageBubbleAssistant) } }, message.content) ) ), loading && React.createElement('div', { style: styles.loadingIndicator }, React.createElement('div', { style: styles.loadingBubble }, 'Печатает...') ) ) ), React.createElement('div', { style: styles.inputArea }, React.createElement('div', { style: styles.inputContainer }, React.createElement('textarea', { style: styles.textInput, value: currentQuery, onChange: (e) => setCurrentQuery(e.target.value), placeholder: 'Введите ваш вопрос...', rows: 1, onKeyDown: (e) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); onSubmitQuery(); } } }), React.createElement('button', { style: { ...styles.sendButton, ...((!currentQuery.trim() || loading) ? styles.sendButtonDisabled : {}) }, onClick: () => onSubmitQuery(), disabled: !currentQuery.trim() || loading }, loading ? 'Отправка...' : 'Отправить') ) ) ) );
}
const exportedComponent = VodokanalSearch;
  
return exportedComponent;