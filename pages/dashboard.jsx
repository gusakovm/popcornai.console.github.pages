function DashboardContent({ data }) { const styles = { container: { padding: '0 20px', marginBottom: '20px', fontFamily: 'Inter, sans-serif' }, grid: { display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))', gap: '20px' }, card: { backgroundColor: 'white', borderRadius: '4px', border: '1px solid #e0e0e0', padding: '20px' }, cardHeader: { display: 'flex', alignItems: 'center', marginBottom: '15px' }, iconContainer: { marginRight: '10px', display: 'flex', alignItems: 'center' }, cardTitle: { margin: 0, color: '#333', fontSize: '16px', fontWeight: '500' }, cardValue: { margin: 0, color: '#333', fontSize: '24px', fontWeight: 'bold' }, noData: { textAlign: 'center', color: '#666', padding: '40px 0' } }; const createChartIcon = (size = 20, color = '#555') => { return React.createElement('svg', { xmlns: 'http: width: size, height: size, viewBox: '0 0 24 24', fill: 'none', stroke: color, strokeWidth: 2, strokeLinecap: 'round', strokeLinejoin: 'round' }, React.createElement('line', { x1: 12, y1: 20, x2: 12, y2: 10 }), React.createElement('line', { x1: 18, y1: 20, x2: 18, y2: 4 }), React.createElement('line', { x1: 6, y1: 20, x2: 6, y2: 16 }) ); }; const createUsersIcon = (size = 20, color = '#555') => { return React.createElement('svg', { xmlns: 'http: width: size, height: size, viewBox: '0 0 24 24', fill: 'none', stroke: color, strokeWidth: 2, strokeLinecap: 'round', strokeLinejoin: 'round' }, React.createElement('path', { d: 'M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2' }), React.createElement('circle', { cx: 9, cy: 7, r: 4 }), React.createElement('path', { d: 'M23 21v-2a4 4 0 0 0-3-3.87' }), React.createElement('path', { d: 'M16 3.13a4 4 0 0 1 0 7.75' }) ); }; const createActivityIcon = (size = 20, color = '#555') => { return React.createElement('svg', { xmlns: 'http: width: size, height: size, viewBox: '0 0 24 24', fill: 'none', stroke: color, strokeWidth: 2, strokeLinecap: 'round', strokeLinejoin: 'round' }, React.createElement('polyline', { points: '22 12 18 12 15 21 9 3 6 12 2 12' }) ); }; const getIconForKey = (key) => { if (key.toLowerCase().includes('user') || key.toLowerCase().includes('пользовател')) { return createUsersIcon(20, '#555'); } else if (key.toLowerCase().includes('запрос') || key.toLowerCase().includes('api')) { return createActivityIcon(20, '#555'); } else { return createChartIcon(20, '#555'); } }; if (!data || Object.keys(data).length === 0) { return React.createElement('div', { style: styles.container }, React.createElement('p', { style: styles.noData }, 'Нет данных для отображения') ); } const cards = Object.entries(data).map(([key, value]) => { return React.createElement('div', { key, style: styles.card }, React.createElement('div', { style: styles.cardHeader }, React.createElement('div', { style: styles.iconContainer }, getIconForKey(key)), React.createElement('h3', { style: styles.cardTitle }, key) ), React.createElement('p', { style: styles.cardValue }, value) ); }); return React.createElement('div', { style: styles.container }, React.createElement('div', { style: styles.grid }, cards) );
}
function DashboardFooter({ onRefresh }) { const styles = { footer: { padding: '20px', backgroundColor: 'white', borderTop: '1px solid #e0e0e0', display: 'flex', justifyContent: 'space-between', alignItems: 'center', fontFamily: 'Inter, sans-serif' }, refreshButton: { display: 'flex', alignItems: 'center', backgroundColor: 'white', color: '#333', border: '1px solid #e0e0e0', borderRadius: '4px', padding: '8px 16px', cursor: 'pointer', fontSize: '14px', fontWeight: '500', transition: 'background-color 0.2s' }, buttonText: { marginLeft: '8px' }, copyright: { margin: 0, color: '#666', fontSize: '14px' } }; const createRefreshIcon = (size = 16, color = '#333') => { return React.createElement('svg', { xmlns: 'http: width: size, height: size, viewBox: '0 0 24 24', fill: 'none', stroke: color, strokeWidth: 2, strokeLinecap: 'round', strokeLinejoin: 'round' }, React.createElement('path', { d: 'M23 4v6h-6' }), React.createElement('path', { d: 'M1 20v-6h6' }), React.createElement('path', { d: 'M3.51 9a9 9 0 0 1 14.85-3.36L23 10' }), React.createElement('path', { d: 'M1 14l4.64 4.36A9 9 0 0 0 20.49 15' }) ); }; const currentYear = new Date().getFullYear(); return React.createElement('footer', { style: styles.footer }, React.createElement('p', { style: styles.copyright }, `© ${currentYear} PopcornAI Console. Все права защищены.` ), React.createElement('button', { style: styles.refreshButton, onClick: onRefresh }, createRefreshIcon(16, '#333'), React.createElement('span', { style: styles.buttonText }, 'Обновить данные') ) );
}
function DashboardHeader({ title }) { const styles = { header: { padding: '20px', backgroundColor: 'white', borderBottom: '1px solid #e0e0e0', marginBottom: '20px', display: 'flex', alignItems: 'center', fontFamily: 'Inter, sans-serif' }, iconContainer: { marginRight: '12px', display: 'flex', alignItems: 'center' }, title: { margin: 0, color: '#333', fontSize: '24px', fontWeight: '600' } }; const createDashboardIcon = (size = 24, color = '#333') => { return React.createElement('svg', { xmlns: 'http: width: size, height: size, viewBox: '0 0 24 24', fill: 'none', stroke: color, strokeWidth: 2, strokeLinecap: 'round', strokeLinejoin: 'round' }, React.createElement('rect', { x: 3, y: 3, width: 7, height: 9 }), React.createElement('rect', { x: 14, y: 3, width: 7, height: 5 }), React.createElement('rect', { x: 14, y: 12, width: 7, height: 9 }), React.createElement('rect', { x: 3, y: 16, width: 7, height: 5 }) ); }; return React.createElement('header', { style: styles.header }, React.createElement('div', { style: styles.iconContainer }, createDashboardIcon(24, '#333') ), React.createElement('h1', { style: styles.title }, title) );
}
function Dashboard() { const styles = { container: { fontFamily: 'Inter, sans-serif', display: 'flex', flexDirection: 'column', minHeight: '100vh', backgroundColor: '#f9f9f9' }, content: { flex: 1 }, loadingContainer: { display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', padding: '40px', fontFamily: 'Inter, sans-serif' }, loadingIcon: { marginBottom: '16px' }, loadingText: { color: '#666', fontSize: '16px' }, errorContainer: { padding: '40px', textAlign: 'center', fontFamily: 'Inter, sans-serif' }, errorMessage: { color: '#e53935', fontSize: '16px', marginBottom: '20px' }, retryButton: { backgroundColor: 'white', color: '#333', border: '1px solid #e0e0e0', borderRadius: '4px', padding: '8px 16px', cursor: 'pointer', fontSize: '14px', fontWeight: '500' } }; const createLoaderIcon = (size = 32, color = '#666') => { return React.createElement('svg', { xmlns: 'http: width: size, height: size, viewBox: '0 0 24 24', fill: 'none', stroke: color, strokeWidth: 2, strokeLinecap: 'round', strokeLinejoin: 'round', style: { animation: 'spin 1s linear infinite' } }, React.createElement('line', { x1: 12, y1: 2, x2: 12, y2: 6 }), React.createElement('line', { x1: 12, y1: 18, x2: 12, y2: 22 }), React.createElement('line', { x1: 4.93, y1: 4.93, x2: 7.76, y2: 7.76 }), React.createElement('line', { x1: 16.24, y1: 16.24, x2: 19.07, y2: 19.07 }), React.createElement('line', { x1: 2, y1: 12, x2: 6, y2: 12 }), React.createElement('line', { x1: 18, y1: 12, x2: 22, y2: 12 }), React.createElement('line', { x1: 4.93, y1: 19.07, x2: 7.76, y2: 16.24 }), React.createElement('line', { x1: 16.24, y1: 7.76, x2: 19.07, y2: 4.93 }) ); }; React.useEffect(() => { const style = document.createElement('style'); style.innerHTML = ` @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } } `; document.head.appendChild(style); return () => { document.head.removeChild(style); }; }, []); const [dashboardData, setDashboardData] = React.useState(null); const [loading, setLoading] = React.useState(true); const [error, setError] = React.useState(null); const fetchDashboardData = React.useCallback(async () => { try { setLoading(true); const response = await n8nFetch('dashboard/data'); const data = await response.json(); setDashboardData(data); setError(null); } catch (err) { console.error('Error fetching dashboard data:', err); setError('Не удалось загрузить данные дашборда'); setDashboardData(null); } finally { setLoading(false); } }, []); React.useEffect(() => { fetchDashboardData(); }, [fetchDashboardData]); if (loading) { return React.createElement('div', { style: styles.loadingContainer }, React.createElement('div', { style: styles.loadingIcon }, createLoaderIcon(32, '#666') ), React.createElement('p', { style: styles.loadingText }, 'Загрузка данных дашборда...') ); } if (error) { return React.createElement('div', { style: styles.errorContainer }, React.createElement('p', { style: styles.errorMessage }, `Ошибка: ${error}`), React.createElement('button', { style: styles.retryButton, onClick: fetchDashboardData }, 'Попробовать снова') ); } return React.createElement('div', { style: styles.container }, React.createElement(DashboardHeader, { title: 'Панель управления' }), React.createElement('div', { style: styles.content }, React.createElement(DashboardContent, { data: dashboardData }) ), React.createElement(DashboardFooter, { onRefresh: fetchDashboardData }) );
}
const exportedComponent = Dashboard;
  
return Dashboard;