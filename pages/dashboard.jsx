import { BarChart, Users, Activity } from 'lucide-react';
function DashboardContent({ data }) { const styles = { container: { padding: '0 20px', marginBottom: '20px', fontFamily: 'Inter, sans-serif' }, grid: { display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))', gap: '20px' }, card: { backgroundColor: 'white', borderRadius: '4px', border: '1px solid #e0e0e0', padding: '20px' }, cardHeader: { display: 'flex', alignItems: 'center', marginBottom: '15px' }, iconContainer: { marginRight: '10px', display: 'flex', alignItems: 'center' }, cardTitle: { margin: 0, color: '#333', fontSize: '16px', fontWeight: '500' }, cardValue: { margin: 0, color: '#333', fontSize: '24px', fontWeight: 'bold' }, noData: { textAlign: 'center', color: '#666', padding: '40px 0' } }; const getIconForKey = (key) => { const iconProps = { size: 20, color: '#555' }; if (key.toLowerCase().includes('user') || key.toLowerCase().includes('пользовател')) { return React.createElement(Users, iconProps); } else if (key.toLowerCase().includes('запрос') || key.toLowerCase().includes('api')) { return React.createElement(Activity, iconProps); } else { return React.createElement(BarChart, iconProps); } }; if (!data || Object.keys(data).length === 0) { return React.createElement('div', { style: styles.container }, React.createElement('p', { style: styles.noData }, 'Нет данных для отображения') ); } const cards = Object.entries(data).map(([key, value]) => { return React.createElement('div', { key, style: styles.card }, React.createElement('div', { style: styles.cardHeader }, React.createElement('div', { style: styles.iconContainer }, getIconForKey(key)), React.createElement('h3', { style: styles.cardTitle }, key) ), React.createElement('p', { style: styles.cardValue }, value) ); }); return React.createElement('div', { style: styles.container }, React.createElement('div', { style: styles.grid }, cards) );
}
import { RefreshCw } from 'lucide-react';
function DashboardFooter({ onRefresh }) { const styles = { footer: { padding: '20px', backgroundColor: 'white', borderTop: '1px solid #e0e0e0', display: 'flex', justifyContent: 'space-between', alignItems: 'center', fontFamily: 'Inter, sans-serif' }, refreshButton: { display: 'flex', alignItems: 'center', backgroundColor: 'white', color: '#333', border: '1px solid #e0e0e0', borderRadius: '4px', padding: '8px 16px', cursor: 'pointer', fontSize: '14px', fontWeight: '500', transition: 'background-color 0.2s' }, buttonText: { marginLeft: '8px' }, copyright: { margin: 0, color: '#666', fontSize: '14px' } }; const currentYear = new Date().getFullYear(); return React.createElement('footer', { style: styles.footer }, React.createElement('p', { style: styles.copyright }, `© ${currentYear} PopcornAI Console. Все права защищены.` ), React.createElement('button', { style: styles.refreshButton, onClick: onRefresh }, React.createElement(RefreshCw, { size: 16, color: '#333' }), React.createElement('span', { style: styles.buttonText }, 'Обновить данные') ) );
}
import { LayoutDashboard } from 'lucide-react';
function DashboardHeader({ title }) { const styles = { header: { padding: '20px', backgroundColor: 'white', borderBottom: '1px solid #e0e0e0', marginBottom: '20px', display: 'flex', alignItems: 'center', fontFamily: 'Inter, sans-serif' }, iconContainer: { marginRight: '12px', display: 'flex', alignItems: 'center' }, title: { margin: 0, color: '#333', fontSize: '24px', fontWeight: '600' } }; return React.createElement('header', { style: styles.header }, React.createElement('div', { style: styles.iconContainer }, React.createElement(LayoutDashboard, { size: 24, color: '#333' }) ), React.createElement('h1', { style: styles.title }, title) );
}
import { Loader } from 'lucide-react';
function Dashboard() { const styles = { container: { fontFamily: 'Inter, sans-serif', display: 'flex', flexDirection: 'column', minHeight: '100vh', backgroundColor: '#f9f9f9' }, content: { flex: 1 }, loadingContainer: { display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', padding: '40px', fontFamily: 'Inter, sans-serif' }, loadingIcon: { animation: 'spin 1s linear infinite', marginBottom: '16px' }, loadingText: { color: '#666', fontSize: '16px' }, errorContainer: { padding: '40px', textAlign: 'center', fontFamily: 'Inter, sans-serif' }, errorMessage: { color: '#e53935', fontSize: '16px', marginBottom: '20px' }, retryButton: { backgroundColor: 'white', color: '#333', border: '1px solid #e0e0e0', borderRadius: '4px', padding: '8px 16px', cursor: 'pointer', fontSize: '14px', fontWeight: '500' } }; const [dashboardData, setDashboardData] = React.useState(null); const [loading, setLoading] = React.useState(true); const [error, setError] = React.useState(null); const fetchDashboardData = React.useCallback(async () => { try { setLoading(true); const response = await n8nFetch('dashboard/data'); const data = await response.json(); setDashboardData(data); setError(null); } catch (err) { console.error('Error fetching dashboard data:', err); setError('Не удалось загрузить данные дашборда'); setDashboardData(null); } finally { setLoading(false); } }, []); React.useEffect(() => { fetchDashboardData(); }, [fetchDashboardData]); if (loading) { return React.createElement('div', { style: styles.loadingContainer }, React.createElement('div', { style: styles.loadingIcon }, React.createElement(Loader, { size: 32, color: '#666' }) ), React.createElement('p', { style: styles.loadingText }, 'Загрузка данных дашборда...') ); } if (error) { return React.createElement('div', { style: styles.errorContainer }, React.createElement('p', { style: styles.errorMessage }, `Ошибка: ${error}`), React.createElement('button', { style: styles.retryButton, onClick: fetchDashboardData }, 'Попробовать снова') ); } return React.createElement('div', { style: styles.container }, React.createElement(DashboardHeader, { title: 'Панель управления' }), React.createElement('div', { style: styles.content }, React.createElement(DashboardContent, { data: dashboardData }) ), React.createElement(DashboardFooter, { onRefresh: fetchDashboardData }) );
}
const exportedComponent = Dashboard;
  
return Dashboard;